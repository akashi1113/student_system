<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.csu.sms.persistence.ExamMapper">

    <!-- 考试结果映射 -->
    <resultMap id="ExamResultMap" type="com.csu.sms.model.exam.Exam">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="duration" property="duration" jdbcType="INTEGER"/>
        <result column="total_score" property="totalScore" jdbcType="INTEGER"/>
        <result column="passing_score" property="passingScore" jdbcType="INTEGER"/>
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
        <result column="end_time" property="endTime" jdbcType="TIMESTAMP"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="booking_status" property="bookingStatus" jdbcType="VARCHAR"/>
        <result column="exam_type" property="type" jdbcType="VARCHAR"/>
        <result column="max_attempts" property="maxAttempts" jdbcType="INTEGER"/>
        <result column="created_by" property="createdBy" jdbcType="BIGINT"/>
        <result column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 考试记录结果映射 -->
    <resultMap id="ExamRecordResultMap" type="com.csu.sms.model.exam.ExamRecord">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="exam_id" property="examId" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
        <result column="submit_time" property="submitTime" jdbcType="TIMESTAMP"/>
        <result column="duration" property="duration" jdbcType="INTEGER"/>
        <result column="score" property="score" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="violation_count" property="violationCount" jdbcType="INTEGER"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 考试统计结果映射 -->
    <resultMap id="ExamStatisticsResultMap" type="com.csu.sms.model.exam.ExamStatistics">
        <result column="exam_id" property="examId" jdbcType="BIGINT"/>
        <result column="total_participants" property="totalParticipants" jdbcType="INTEGER"/>
        <result column="completed_count" property="completedCount" jdbcType="INTEGER"/>
        <result column="average_score" property="averageScore" jdbcType="INTEGER"/>
        <result column="max_score" property="maxScore" jdbcType="INTEGER"/>
        <result column="min_score" property="minScore" jdbcType="INTEGER"/>
        <result column="pass_rate" property="passRate" jdbcType="DOUBLE"/>
    </resultMap>

    <!-- 考试字段 -->
    <sql id="examColumns">
        id, title, description, duration, total_score, passing_score,
        start_time, end_time, status, booking_status,
        max_attempts, created_by, course_id, created_at, updated_at
    </sql>

    <!-- 考试记录字段 -->
    <sql id="examRecordColumns">
        id, exam_id, user_id, start_time, submit_time, duration,
        score, status, violation_count, created_at
    </sql>

    <!-- 查询所有可用的考试 -->
    <select id="findAvailableExams" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE status = 'PUBLISHED'
        ORDER BY created_at DESC
    </select>

    <!-- 根据ID查询考试 -->
    <select id="findById" parameterType="long" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE id = #{id}
    </select>

    <!-- 根据课程ID查询考试 -->
    <select id="findByCourseId" parameterType="long" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE course_id = #{courseId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据状态查询考试列表 -->
    <select id="findByStatus" parameterType="string" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE status = #{status}
        ORDER BY created_at DESC
    </select>

    <!-- 根据创建者查询考试列表 -->
    <select id="findByCreatedBy" parameterType="long" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE created_by = #{createdBy}
        ORDER BY created_at DESC
    </select>

    <!-- 分页查询考试 -->
    <select id="findExamsWithPagination" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 统计考试数量 -->
    <select id="countExams" resultType="int">
        SELECT COUNT(*) FROM exams
    </select>

    <!-- 查询可预约考试 -->
    <select id="findBookableExams" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE status = 'PUBLISHED'
        AND booking_status = 'AVAILABLE'
        AND end_time > NOW()
        ORDER BY created_at DESC
    </select>

    <!-- 根据预约状态查询考试 -->
    <select id="findByBookingStatus" parameterType="string" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE booking_status = #{bookingStatus}
        ORDER BY created_at DESC
    </select>

    <!-- 根据考试ID查询题目列表 -->
    <select id="findQuestionsByExamId" parameterType="long" resultType="com.csu.sms.model.question.Question">
        SELECT id, exam_id, content, type, score, order_num, analysis, difficulty, created_at, updated_at
        FROM questions
        WHERE exam_id = #{examId}
        ORDER BY order_num ASC
    </select>

    <!-- 插入考试 -->
    <insert id="insert" parameterType="com.csu.sms.model.exam.Exam" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO exams (
            title, description, duration, total_score, passing_score,
            start_time, end_time, status, booking_status,
            max_attempts, created_by, course_id, created_at
        )
        VALUES (
                   #{title}, #{description}, #{duration}, #{totalScore}, #{passingScore},
                   #{startTime}, #{endTime}, #{status}, #{bookingStatus},
                   #{maxAttempts}, #{createdBy}, #{courseId}, NOW()
               )
    </insert>

    <!-- 更新考试 -->
    <update id="update" parameterType="com.csu.sms.model.exam.Exam">
        UPDATE exams
        SET title = #{title},
            description = #{description},
            duration = #{duration},
            total_score = #{totalScore},
            passing_score = #{passingScore},
            start_time = #{startTime},
            end_time = #{endTime},
            status = #{status},
            booking_status = #{bookingStatus},
            max_attempts = #{maxAttempts},
            course_id = #{courseId},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 更新考试预约状态 -->
    <update id="updateBookingStatus">
        UPDATE exams
        SET booking_status = #{bookingStatus},
            updated_at = NOW()
        WHERE id = #{examId}
    </update>

    <!-- 删除考试 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM exams WHERE id = #{id}
    </delete>

    <!-- 查询考试记录 -->
    <select id="findExamRecord" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE exam_id = #{examId} AND user_id = #{userId}
    </select>

    <!-- 根据ID查询考试记录 -->
    <select id="findExamRecordById" parameterType="long" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE id = #{id}
    </select>

    <!-- 根据用户ID查询考试记录列表 -->
    <select id="findExamRecordsByUserId" parameterType="long" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE user_id = #{userId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据考试ID查询所有考试记录 -->
    <select id="findExamRecordsByExamId" parameterType="long" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE exam_id = #{examId}
        ORDER BY created_at DESC
    </select>

    <!-- 插入考试记录 -->
    <insert id="insertExamRecord" parameterType="com.csu.sms.model.exam.ExamRecord" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO exam_records (
            exam_id, user_id, start_time, submit_time,
            duration, score, status, violation_count, created_at
        )
        VALUES (
                   #{examId}, #{userId}, #{startTime}, #{submitTime},
                   #{duration}, #{score}, #{status}, #{violationCount}, NOW()
               )
    </insert>

    <!-- 更新考试记录 -->
    <update id="updateExamRecord" parameterType="com.csu.sms.model.exam.ExamRecord">
        UPDATE exam_records
        <set>
            <if test="startTime != null">start_time = #{startTime},</if>
            <if test="submitTime != null">submit_time = #{submitTime},</if>
            <if test="duration != null">duration = #{duration},</if>
            <if test="score != null">score = #{score},</if>
            <if test="status != null">status = #{status},</if>
            <if test="violationCount != null">violation_count = #{violationCount},</if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 批量更新考试记录状态 -->
    <update id="batchUpdateExamStatus">
        UPDATE exam_records
        SET status = #{newStatus}, submit_time = NOW()
        WHERE exam_id = #{examId} AND status = #{oldStatus}
    </update>

    <!-- 更新考试记录分数 -->
    <update id="updateExamRecordScore">
        UPDATE exam_records
        SET score = #{score}
        WHERE id = #{examRecordId}
    </update>

    <!-- 删除考试记录 -->
    <delete id="deleteExamRecord" parameterType="long">
        DELETE FROM exam_records WHERE id = #{id}
    </delete>

    <!-- 根据考试ID删除所有考试记录 -->
    <delete id="deleteExamRecordsByExamId" parameterType="long">
        DELETE FROM exam_records WHERE exam_id = #{examId}
    </delete>

    <!-- 统计考试参与人数 -->
    <select id="countParticipants" parameterType="long" resultType="int">
        SELECT COUNT(DISTINCT user_id) FROM exam_records WHERE exam_id = #{examId}
    </select>

    <!-- 查询考试统计信息 -->
    <select id="getExamStatistics" parameterType="long" resultMap="ExamStatisticsResultMap">
        SELECT
            #{examId} as exam_id,
            COUNT(DISTINCT user_id) as total_participants,
            SUM(CASE WHEN status = 'SUBMITTED' THEN 1 ELSE 0 END) as completed_count,
            ROUND(AVG(CASE WHEN status = 'SUBMITTED' THEN score END)) as average_score,
            MAX(CASE WHEN status = 'SUBMITTED' THEN score END) as max_score,
            MIN(CASE WHEN status = 'SUBMITTED' THEN score END) as min_score,
            ROUND(
                    SUM(CASE WHEN status = 'SUBMITTED' AND score >= (SELECT total_score * 0.6 FROM exams WHERE id = #{examId}) THEN 1 ELSE 0 END) * 100.0 /
                    SUM(CASE WHEN status = 'SUBMITTED' THEN 1 ELSE 0 END), 2
            ) as pass_rate
        FROM exam_records
        WHERE exam_id = #{examId}
    </select>

    <!-- 插入答题记录 -->
    <insert id="insertAnswerRecord">
        INSERT INTO answer_records (exam_record_id, question_id, answer, answered_at)
        VALUES (#{examRecordId}, #{answer.questionId}, #{answer.answer}, NOW())
    </insert>

    <!-- 批量插入答题记录 -->
    <insert id="batchInsertAnswerRecords">
        INSERT INTO answer_records (exam_record_id, question_id, answer, answered_at)
        VALUES
        <foreach collection="answers" item="answer" separator=",">
            (#{examRecordId}, #{answer.questionId}, #{answer.answer}, NOW())
        </foreach>
    </insert>

    <!-- 查询答题记录 -->
    <select id="findAnswerRecords" parameterType="long" resultType="com.csu.sms.dto.exam.AnswerDTO">
        SELECT question_id as questionId, answer
        FROM answer_records
        WHERE exam_record_id = #{examRecordId}
        ORDER BY question_id
    </select>

    <!-- 根据状态查询考试记录 -->
    <select id="findExamRecordsByStatus" parameterType="string" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE status = #{status}
        ORDER BY start_time ASC
    </select>

    <!-- 查询考试及其时间段信息 -->
    <select id="findExamWithTimeSlots" parameterType="long" resultMap="ExamResultMap">
        SELECT e.*,
               COUNT(ets.id) as timeSlotCount,
               SUM(ets.current_bookings) as totalBookings
        FROM exams e
                 LEFT JOIN exam_time_slots ets ON e.id = ets.exam_id
        WHERE e.id = #{examId}
        GROUP BY e.id
    </select>


    <select id="findByIds" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE id IN
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY start_time ASC
    </select>

    <!-- 根据创建者和状态查询考试列表 -->
    <select id="findByCreatedByAndStatus" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE created_by = #{createdBy} AND status = #{status}
        ORDER BY created_at DESC
    </select>

    <!-- 获取考试的总分（通过题目计算） -->
    <select id="getTotalScoreByExamId" parameterType="long" resultType="int">
        SELECT COALESCE(SUM(score), 0)
        FROM questions
        WHERE exam_id = #{examId}
    </select>

    <!-- 计算考试记录的总分 -->
    <select id="calculateTotalScoreByExamRecordId" parameterType="long" resultType="int">
        SELECT COALESCE(SUM(ar.score), 0)
        FROM answer_records ar
        WHERE ar.exam_record_id = #{examRecordId}
    </select>

    <!-- 检查考试是否有题目 -->
    <select id="hasQuestions" parameterType="long" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM questions
        WHERE exam_id = #{examId}
    </select>

    <!-- 根据考试ID和用户ID查询考试记录 -->
    <select id="findExamRecordByExamAndUser" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE exam_id = #{examId} AND user_id = #{userId}
        ORDER BY created_at DESC
        LIMIT 1
    </select>

    <!-- 检查用户是否可以开始考试 -->
    <select id="canUserStartExam" resultType="boolean">
        SELECT CASE
                   WHEN COUNT(*) = 0 THEN TRUE
                   WHEN COUNT(*) > 0 AND MAX(status) != 'SUBMITTED' THEN FALSE
                   WHEN COUNT(*) >= (SELECT max_attempts FROM exams WHERE id = #{examId}) THEN FALSE
                   ELSE TRUE
                   END
        FROM exam_records
        WHERE exam_id = #{examId} AND user_id = #{userId}
    </select>

    <!-- 获取用户在特定考试的尝试次数 -->
    <select id="getUserExamAttempts" resultType="int">
        SELECT COUNT(*)
        FROM exam_records
        WHERE exam_id = #{examId} AND user_id = #{userId}
    </select>

    <!-- 获取考试的最大尝试次数 -->
    <select id="getExamMaxAttempts" parameterType="long" resultType="int">
        SELECT max_attempts
        FROM exams
        WHERE id = #{examId}
    </select>

    <!-- 批量更新考试状态 -->
    <update id="batchUpdateExamsByStatus">
        UPDATE exams
        SET status = #{newStatus}, updated_at = NOW()
        WHERE status = #{oldStatus}
        <if test="createdBy != null">
            AND created_by = #{createdBy}
        </if>
    </update>

    <!-- 根据课程ID和状态查询考试 -->
    <select id="findByCourseIdAndStatus" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE course_id = #{courseId} AND status = #{status}
        ORDER BY created_at DESC
    </select>

    <!-- 查询即将开始的考试（用于提醒） -->
    <select id="findUpcomingExams" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE status = 'PUBLISHED'
        AND start_time BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL #{hours} HOUR)
        ORDER BY start_time ASC
    </select>

    <!-- 查询过期的考试（用于自动处理） -->
    <select id="findExpiredExams" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE status = 'PUBLISHED'
        AND end_time &lt; NOW()
        ORDER BY end_time ASC
    </select>

    <!-- 统计教师创建的考试数量 -->
    <select id="countExamsByCreator" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM exams
        WHERE created_by = #{createdBy}
        <if test="status != null">
            AND status = #{status}
        </if>
    </select>

    <!-- 获取考试参与统计 -->
    <select id="getExamParticipationStats" parameterType="long" resultType="map">
        SELECT
            COUNT(DISTINCT er.user_id) as totalParticipants,
            COUNT(CASE WHEN er.status = 'SUBMITTED' THEN 1 END) as completedCount,
            COUNT(CASE WHEN er.status = 'IN_PROGRESS' THEN 1 END) as inProgressCount,
            ROUND(AVG(CASE WHEN er.status = 'SUBMITTED' THEN er.score END), 2) as averageScore
        FROM exam_records er
        WHERE er.exam_id = #{examId}
    </select>

    <!-- 软删除考试（标记为删除状态） -->
    <update id="softDeleteExam" parameterType="long">
        UPDATE exams
        SET status = 'DELETED', updated_at = NOW()
        WHERE id = #{examId}
    </update>

    <!-- 恢复软删除的考试 -->
    <update id="restoreExam" parameterType="long">
        UPDATE exams
        SET status = 'DRAFT', updated_at = NOW()
        WHERE id = #{examId} AND status = 'DELETED'
    </update>

    <!-- 复制考试 -->
    <insert id="copyExam" parameterType="map" useGeneratedKeys="true" keyProperty="newExamId">
        INSERT INTO exams (
            title, description, duration, total_score, passing_score,
            max_attempts, created_by, course_id, exam_mode,
            status, booking_status, created_at
        )
        SELECT
            CONCAT(title, ' (副本)') as title,
            description, duration, total_score, passing_score,
            max_attempts, #{newCreatedBy} as created_by,
            course_id, exam_mode, 'DRAFT' as status,
            'UNAVAILABLE' as booking_status, NOW() as created_at
        FROM exams
        WHERE id = #{originalExamId}
    </insert>

</mapper>