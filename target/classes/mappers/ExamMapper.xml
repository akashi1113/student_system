<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.csu.sms.persistence.ExamMapper">

    <!-- 结果映射 -->
    <resultMap id="ExamResultMap" type="com.csu.sms.model.exam.Exam">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="duration" property="duration" jdbcType="INTEGER"/>
        <result column="total_score" property="totalScore" jdbcType="INTEGER"/>
        <result column="passing_score" property="passingScore" jdbcType="INTEGER"/>
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
        <result column="end_time" property="endTime" jdbcType="TIMESTAMP"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="exam_type" property="type" jdbcType="VARCHAR"/>
        <result column="max_attempts" property="maxAttempts" jdbcType="INTEGER"/>
        <result column="created_by" property="createdBy" jdbcType="BIGINT"/>
        <result column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="ExamRecordResultMap" type="com.csu.sms.model.exam.ExamRecord">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="exam_id" property="examId" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
        <result column="submit_time" property="submitTime" jdbcType="TIMESTAMP"/>
        <result column="duration" property="duration" jdbcType="INTEGER"/>
        <result column="score" property="score" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="violation_count" property="violationCount" jdbcType="INTEGER"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="ExamStatisticsResultMap" type="com.csu.sms.model.exam.ExamStatistics">
        <result column="exam_id" property="examId" jdbcType="BIGINT"/>
        <result column="total_participants" property="totalParticipants" jdbcType="INTEGER"/>
        <result column="completed_count" property="completedCount" jdbcType="INTEGER"/>
        <result column="average_score" property="averageScore" jdbcType="INTEGER"/>
        <result column="max_score" property="maxScore" jdbcType="INTEGER"/>
        <result column="min_score" property="minScore" jdbcType="INTEGER"/>
        <result column="pass_rate" property="passRate" jdbcType="DOUBLE"/>
    </resultMap>

    <sql id="examColumns">
        id, title, description, duration, total_score, start_time, end_time, status, created_by, created_at, updated_at
    </sql>

    <sql id="examRecordColumns">
        id, exam_id, user_id, start_time, submit_time, duration, score, status, violation_count, created_at
    </sql>

    <!-- 查询所有可用的考试/作业 -->
    <select id="findAvailableExams" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE status = 'PUBLISHED'
        AND start_time &lt;= NOW()
        AND end_time &gt;= NOW()
        ORDER BY created_at DESC
    </select>

    <!-- 根据ID查询考试/作业 -->
    <select id="findById" parameterType="long" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE id = #{id}
    </select>

    <!-- 根据类型查询考试/作业 -->
    <select id="findByType" parameterType="string" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE exam_type = #{type}
        ORDER BY created_at DESC
    </select>

    <!-- 根据课程ID查询考试/作业 -->
    <select id="findByCourseId" parameterType="long" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE course_id = #{courseId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据状态查询考试/作业列表 -->
    <select id="findByStatus" parameterType="string" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE status = #{status}
        ORDER BY created_at DESC
    </select>

    <!-- 根据创建者查询考试/作业列表 -->
    <select id="findByCreatedBy" parameterType="long" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        WHERE created_by = #{createdBy}
        ORDER BY created_at DESC
    </select>

    <!-- 分页查询考试/作业 -->
    <select id="findExamsWithPagination" resultMap="ExamResultMap">
        SELECT <include refid="examColumns"/>
        FROM exams
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 统计考试/作业数量 -->
    <select id="countExams" resultType="int">
        SELECT COUNT(*) FROM exams
    </select>

    <!-- 根据考试ID查询题目列表 -->
    <select id="findQuestionsByExamId" parameterType="long" resultType="com.csu.sms.model.question.Question">
        SELECT id, exam_id, content, type, score, order_num, analysis, difficulty, created_at, updated_at
        FROM questions
        WHERE exam_id = #{examId}
        ORDER BY order_num ASC
    </select>

    <!-- 插入考试 -->
    <insert id="insert" parameterType="com.csu.sms.model.exam.Exam" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO exams (
            title, description, duration, total_score, passing_score,
            start_time, end_time, status, exam_type, max_attempts,
            created_by, course_id, created_at
        )
        VALUES (
                   #{title}, #{description}, #{duration}, #{totalScore}, #{passingScore},
                   #{startTime}, #{endTime}, #{status}, #{examType}, #{maxAttempts},
                   #{createdBy}, #{courseId}, NOW()
               )
    </insert>

    <!-- 更新考试/作业 -->
    <update id="update" parameterType="com.csu.sms.model.exam.Exam">
        UPDATE exams
        SET title = #{title},
            description = #{description},
            duration = #{duration},
            total_score = #{totalScore},
            passing_score = #{passingScore},
            start_time = #{startTime},
            end_time = #{endTime},
            status = #{status},
            exam_type = #{examType},
            max_attempts = #{maxAttempts},
            course_id = #{courseId},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 删除考试/作业 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM exams WHERE id = #{id}
    </delete>

    <!-- 查询考试记录 -->
    <select id="findExamRecord" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE exam_id = #{examId} AND user_id = #{userId}
    </select>

    <!-- 根据ID查询考试记录 -->
    <select id="findExamRecordById" parameterType="long" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE id = #{id}
    </select>

    <!-- 根据用户ID查询考试记录列表 -->
    <select id="findExamRecordsByUserId" parameterType="long" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE user_id = #{userId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据考试ID查询所有考试记录 -->
    <select id="findExamRecordsByExamId" parameterType="long" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE exam_id = #{examId}
        ORDER BY created_at DESC
    </select>

    <!-- 插入考试记录 -->
    <insert id="insertExamRecord" parameterType="com.csu.sms.model.exam.ExamRecord" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO exam_records (exam_id, user_id, start_time, submit_time, duration, score, status, violation_count, created_at)
        VALUES (#{examId}, #{userId}, #{startTime}, #{submitTime}, #{duration}, #{score}, #{status}, #{violationCount}, NOW())
    </insert>

    <!-- 更新考试记录 -->
    <update id="updateExamRecord" parameterType="com.csu.sms.model.exam.ExamRecord">
        UPDATE exam_records
        <set>
            <if test="startTime != null">start_time = #{startTime},</if>
            <if test="submitTime != null">submit_time = #{submitTime},</if>
            <if test="duration != null">duration = #{duration},</if>
            <if test="score != null">score = #{score},</if>
            <if test="status != null">status = #{status},</if>
            <if test="violationCount != null">violation_count = #{violationCount},</if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 批量更新考试记录状态（用于考试结束后的批处理） -->
    <update id="batchUpdateExamStatus">
        UPDATE exam_records
        SET status = #{newStatus}, submit_time = NOW()
        WHERE exam_id = #{examId} AND status = #{oldStatus}
    </update>

    <!-- 更新考试记录分数 -->
    <update id="updateExamRecordScore">
        UPDATE exam_records
        SET score = #{score}
        WHERE id = #{examRecordId}
    </update>

    <!-- 删除考试记录 -->
    <delete id="deleteExamRecord" parameterType="long">
        DELETE FROM exam_records WHERE id = #{id}
    </delete>

    <!-- 根据考试ID删除所有考试记录 -->
    <delete id="deleteExamRecordsByExamId" parameterType="long">
        DELETE FROM exam_records WHERE exam_id = #{examId}
    </delete>

    <!-- 统计考试参与人数 -->
    <select id="countParticipants" parameterType="long" resultType="int">
        SELECT COUNT(DISTINCT user_id) FROM exam_records WHERE exam_id = #{examId}
    </select>

    <!-- 查询考试统计信息 -->
    <select id="getExamStatistics" parameterType="long" resultMap="ExamStatisticsResultMap">
        SELECT
            #{examId} as exam_id,
            COUNT(DISTINCT user_id) as total_participants,
            SUM(CASE WHEN status = 'SUBMITTED' THEN 1 ELSE 0 END) as completed_count,
            ROUND(AVG(CASE WHEN status = 'SUBMITTED' THEN score END)) as average_score,
            MAX(CASE WHEN status = 'SUBMITTED' THEN score END) as max_score,
            MIN(CASE WHEN status = 'SUBMITTED' THEN score END) as min_score,
            ROUND(
                    SUM(CASE WHEN status = 'SUBMITTED' AND score >= (SELECT total_score * 0.6 FROM exams WHERE id = #{examId}) THEN 1 ELSE 0 END) * 100.0 /
                    SUM(CASE WHEN status = 'SUBMITTED' THEN 1 ELSE 0 END), 2
            ) as pass_rate
        FROM exam_records
        WHERE exam_id = #{examId}
    </select>

    <!-- 插入答题记录 -->
    <insert id="insertAnswerRecord">
        INSERT INTO answer_records (exam_record_id, question_id, answer, answered_at)
        VALUES (#{examRecordId}, #{answer.questionId}, #{answer.answer}, NOW())
    </insert>

    <!-- 批量插入答题记录 -->
    <insert id="batchInsertAnswerRecords">
        INSERT INTO answer_records (exam_record_id, question_id, answer, answered_at)
        VALUES
        <foreach collection="answers" item="answer" separator=",">
            (#{examRecordId}, #{answer.questionId}, #{answer.answer}, NOW())
        </foreach>
    </insert>

    <!-- 查询答题记录 -->
    <select id="findAnswerRecords" parameterType="long" resultType="com.csu.sms.dto.exam.AnswerDTO">
        SELECT question_id as questionId, answer
        FROM answer_records
        WHERE exam_record_id = #{examRecordId}
        ORDER BY question_id
    </select>

    <!-- 根据状态查询考试记录 -->
    <select id="findExamRecordsByStatus" parameterType="string" resultMap="ExamRecordResultMap">
        SELECT <include refid="examRecordColumns"/>
        FROM exam_records
        WHERE status = #{status}
        ORDER BY start_time ASC
    </select>

    <!-- 记录违规行为 -->
<!--    <resultMap id="BaseResultMap" type="com.csu.sms.model.exam.ViolationRecords">-->
<!--        <id column="id" property="id" jdbcType="BIGINT"/>-->
<!--        <result column="exam_record_id" property="examRecordId" jdbcType="BIGINT"/>-->
<!--        <result column="violation_type" property="violationType" jdbcType="VARCHAR"/>-->
<!--        <result column="description" property="description" jdbcType="LONGVARCHAR"/>-->
<!--        <result column="violation_time" property="violationTime" jdbcType="TIMESTAMP"/>-->
<!--        <result column="severity" property="severity" jdbcType="VARCHAR"/>-->
<!--        <result column="handled" property="handled" jdbcType="TINYINT"/>-->
<!--    </resultMap>-->

<!--    <insert id="insertViolationRecord" parameterType="com.example.exam.entity.ViolationRecords" useGeneratedKeys="true" keyProperty="id">-->
<!--        INSERT INTO violation_records-->
<!--        (exam_record_id, violation_type, description, violation_time, severity, handled)-->
<!--        VALUES-->
<!--            (#{examRecordId}, #{violationType}, #{description}, #{violationTime}, #{severity}, #{handled})-->
<!--    </insert>-->

</mapper>